// SPDX-License-Identifier: CC0-1.0
pragma solidity ^0.8.6;

import {IERC4973} from "./IERC4973.sol";

/**
 * @title Giveable account-bound tokens
 *  @dev See https://eips.ethereum.org/EIPS/eip-4973
 *  Note: the ERC-165 identifier for this interface is TODO: identifier
 */
interface IERC4973Giveable is IERC4973 {
    /// @notice Creates and transfers the ownership of an ABT from the
    ///  transaction's `msg.sender` to `address to`.
    /// @dev Throws unless `bytes signature` represents a signature of the
    ///   EIP-712 structured data hash
    ///  `Agreement(address active,address passive)` expressing
    ///  `address to`'s explicit agreement to be publicly associated with
    ///  `msg.sender`. A unique `uint256 tokenId` must be
    ///  generated by type-casting the `bytes32` EIP-712 structured data hash to a
    ///  `uint256`. If `bytes signature` is empty or `address to` is a contract,
    ///  an EIP-1271-compatible call to `function isValidSignatureNow(...)` must
    ///  be made to `address to`. A successful execution must result in the
    ///  `event Transfer(msg.sender, to, tokenId)`. Once an ABT exists as an
    ///  `uint256 tokenId` in the contract, `function give(...)` must throw.
    /// @param to The receiver of the ABT.
    /// @param signature A signature of the EIP-712 structured data hash
    ///  `Agreement(address active,address passive)` signed by
    ///  `address to`.
    /// @return A unique `uint256 tokenId` generated by type-casting the `bytes32`
    ///  EIP-712 structured data hash to a `uint256`.
    function give(
        address to,
        bytes calldata signature
    ) external payable returns (uint256);
}
